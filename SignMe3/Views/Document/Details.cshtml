@model SignMe3.ViewModels.SignFileViewModel


@{
    ViewData["Title"] = "Home Page";
}
<div id="app" v-cloak>
    <h2>{{vm.filename}}</h2>
    <hr />
    <div class="row buttons">
        <div class="col-xs-6">

            <div>
                <a class="btn btn-primary btn-lg" download="SignedFile.pdf" v-bind:href="uploadedFile">Download File</a>
            </div>
        </div>
        @*<div class="col-xs-6">
            <button class="btn btn-primary btn-lg">Save to REDocs</button>

        </div>*@

    </div>
    <div class="row">
        <div class="col-sm-12 col-xs-12">

            <div>
                @*<div v-for="doc in pdfDoc.numPages">
                    <canvas v-on:click="test(doc)"></canvas>
                </div>
                <hr />*@
                <div id="doc">

                    @*<img v-if="!signed" id="drag" style="display:none;position:absolute" src="~/images/Matt Signature-small.png" alt="Alternate Text" />*@
                    @*<canvas v-on:click="updateImage" style="border:1px solid black" id="the-canvas"></canvas>*@
                </div>
            </div>

        </div>
        <div class="col-xs-3 col-sm-9">
            <h2>Activity History</h2>
            <hr />
            <div>
                <div v-for="item in history">
                    {{ item.status }} by {{item.userName}} on {{item.insertDate}}
                </div>
            </div>


        </div>


    </div>
</div>
<style>
    canvas {
        cursor: pointer;
        border: 1px solid black;
    }

    .row {
        margin-top: 25px;
    }

    [v-cloak] {
        display: none;
    }

    /*.buttons .btn {
        padding: 50px;
        width: 100%;
    }*/
</style>


@section scripts{
    <script>

        var vm = @(Html.Raw(Json.Serialize(Model)));

        $(function () {
            GetActiviyHistory();
            renderPDF(atob(vm.base64));
        });

            var app = new Vue({
                el: '#app',
                data: {
                    signed: false,
                    uploadedFile: "data:application/pdf;base64," +  vm.base64,
                    history: vm.activityHistory,
                    pdfDoc: {numPages:0},
                    vm:vm
                },
                methods: {
                    test: function (d) { console.log(d); },
                    updateImage: function (event) {
                        var thisElementIndex = $('canvas').index(event.currentTarget)
                        
                        console.log("click", event.pageX);
                        console.log("click", event.pageY);

                        var thisCanvasElement = $('canvas:eq(' + thisElementIndex + ')');
                        var x = event.pageX - thisCanvasElement.offset().left;
                        var y = event.pageY - thisCanvasElement.offset().top;//- $('.navbar').height();

                        var widthOfCanvas = $('canvas')[0].width;
                        var heightOfCanvas = $('canvas')[0].height;

                        x = (event.pageX) / (widthOfCanvas + thisCanvasElement.offset().left);
                        y = (event.pageY - thisCanvasElement.offset().top) / heightOfCanvas;
                        console.log(x);
                        console.log(y);
                        $.blockUI();

                        $.post('/Document/SignImage', {
                            x: x,
                            y: y,
                            id: vm.documentID,
                            pageNumber: thisElementIndex + 1//,
                            //base64: vm.base64
                        }).then(function (result) {
                            //location.reload();
                            renderPDF(atob(result)).then(function () {
                                $.unblockUI();
                                //app.signed = true;
                                app.uploadedFile = "data:application/pdf;base64," + result;
                            }).then(function () {
                                GetActiviyHistory();
                            });

                        }).fail(function () {
                            $.unblockUI();
                        })
                    }
                }
            })

            var GetActiviyHistory = function () {
                return $.post("/Document/ActivityHistory", { id: vm.documentID }).then(function (results) {
                    app.history = results;

                })

            }
           

            function renderPDF(pdfData) {
                var canvasContainer = document.getElementById('doc');

                //Remove old pdfs
                var pdfs = canvasContainer.querySelectorAll('canvas');
                for (var i = 0; i < pdfs.length; i++) {
                    canvasContainer.removeChild(pdfs[i]);
                }
                var options = { scale: 1.5 };

                function renderPage(page) {
                    var viewport = page.getViewport(options.scale);
                    var canvas = document.createElement('canvas');
                    canvas.addEventListener('click',app.updateImage)
                    var ctx = canvas.getContext('2d');
                    var renderContext = {
                        canvasContext: ctx,
                        viewport: viewport
                    };

                    canvas.height = viewport.height;
                    canvas.width = viewport.width;
                    canvasContainer.appendChild(canvas);
                    
                    page.render(renderContext);
                }

                function renderPages(pdfDoc) {
                    app.pdfs = pdfDoc.numPages;
                    for (var num = 1; num <= pdfDoc.numPages; num++)
                        pdfDoc.getPage(num).then(renderPage);
                }
                PDFJS.disableWorker = true;
                return PDFJS.getDocument({ data: pdfData }).then(renderPages);
            }


    </script>

}